import { NestFactory } from '@nestjs/core';
import { getModelToken } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { AppModule } from '../src/app.module';

// Import schemas
import {
  CalculationCache,
  CalculationCacheDocument,
} from '../src/schemas/calculation-cache.schema';
import { Expense, ExpenseDocument } from '../src/schemas/expense.schema';
import { Group, GroupDocument } from '../src/schemas/group.schema';
import {
  Notification,
  NotificationDocument,
} from '../src/schemas/notification.schema';
import {
  PaymentFormula,
  PaymentFormulaDocument,
} from '../src/schemas/payment-formula.schema';
import {
  Settlement,
  SettlementDocument,
} from '../src/schemas/settlement.schema';
import { User, UserDocument } from '../src/schemas/user.schema';

async function testSeedData() {
  console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu seed...');

  const app = await NestFactory.createApplicationContext(AppModule);

  // Get models
  const userModel = app.get<Model<UserDocument>>(getModelToken(User.name));
  const groupModel = app.get<Model<GroupDocument>>(getModelToken(Group.name));
  const expenseModel = app.get<Model<ExpenseDocument>>(
    getModelToken(Expense.name),
  );
  const settlementModel = app.get<Model<SettlementDocument>>(
    getModelToken(Settlement.name),
  );
  const notificationModel = app.get<Model<NotificationDocument>>(
    getModelToken(Notification.name),
  );
  const paymentFormulaModel = app.get<Model<PaymentFormulaDocument>>(
    getModelToken(PaymentFormula.name),
  );
  const calculationCacheModel = app.get<Model<CalculationCacheDocument>>(
    getModelToken(CalculationCache.name),
  );

  try {
    // ƒê·∫øm s·ªë l∆∞·ª£ng records
    const userCount = await userModel.countDocuments();
    const groupCount = await groupModel.countDocuments();
    const expenseCount = await expenseModel.countDocuments();
    const settlementCount = await settlementModel.countDocuments();
    const notificationCount = await notificationModel.countDocuments();
    const paymentFormulaCount = await paymentFormulaModel.countDocuments();
    const calculationCacheCount = await calculationCacheModel.countDocuments();

    console.log('\nüìä K·∫øt qu·∫£ ki·ªÉm tra:');
    console.log(`üë• Users: ${userCount}`);
    console.log(`üè† Groups: ${groupCount}`);
    console.log(`üí∞ Expenses: ${expenseCount}`);
    console.log(`üí∏ Settlements: ${settlementCount}`);
    console.log(`üîî Notifications: ${notificationCount}`);
    console.log(`üìä Payment Formulas: ${paymentFormulaCount}`);
    console.log(`üíæ Calculation Caches: ${calculationCacheCount}`);

    // Ki·ªÉm tra d·ªØ li·ªáu chi ti·∫øt
    if (userCount > 0) {
      console.log('\nüë• Sample Users:');
      const users = await userModel.find({}, 'email fullName').limit(3);
      users.forEach((user) => {
        console.log(`   - ${user.email} (${user.fullName})`);
      });
    }

    if (groupCount > 0) {
      console.log('\nüè† Sample Groups:');
      const groups = await groupModel
        .find({}, 'name description members')
        .limit(2);
      groups.forEach((group) => {
        console.log(`   - ${group.name}: ${group.members.length} members`);
      });
    }

    if (expenseCount > 0) {
      console.log('\nüí∞ Sample Expenses:');
      const expenses = await expenseModel
        .find({}, 'title amount currency category')
        .limit(3);
      expenses.forEach((expense) => {
        console.log(
          `   - ${expense.title}: ${expense.amount.toLocaleString()} ${expense.currency} (${expense.category})`,
        );
      });
    }

    // Ki·ªÉm tra relationships
    console.log('\nüîó Ki·ªÉm tra relationships:');

    // Ki·ªÉm tra users trong groups
    const groupsWithMembers = await groupModel.aggregate([
      { $unwind: '$members' },
      {
        $group: {
          _id: '$_id',
          name: { $first: '$name' },
          memberCount: { $sum: 1 },
        },
      },
      { $limit: 2 },
    ]);

    if (groupsWithMembers.length > 0) {
      console.log('   ‚úÖ Groups c√≥ members');
      groupsWithMembers.forEach((group) => {
        console.log(`      - ${group.name}: ${group.memberCount} members`);
      });
    }

    // Ki·ªÉm tra expenses trong groups
    const expensesInGroups = await expenseModel.aggregate([
      { $group: { _id: '$groupId', expenseCount: { $sum: 1 } } },
      { $limit: 2 },
    ]);

    if (expensesInGroups.length > 0) {
      console.log('   ‚úÖ Expenses ƒë∆∞·ª£c g√°n cho groups');
      expensesInGroups.forEach((expense) => {
        console.log(
          `      - Group ${expense._id}: ${expense.expenseCount} expenses`,
        );
      });
    }

    // Ki·ªÉm tra notifications cho users
    const notificationsForUsers = await notificationModel.aggregate([
      { $group: { _id: '$userId', notificationCount: { $sum: 1 } } },
      { $limit: 3 },
    ]);

    if (notificationsForUsers.length > 0) {
      console.log('   ‚úÖ Notifications ƒë∆∞·ª£c g√°n cho users');
      notificationsForUsers.forEach((notif) => {
        console.log(
          `      - User ${notif._id}: ${notif.notificationCount} notifications`,
        );
      });
    }

    // T·ªïng k·∫øt
    const totalRecords =
      userCount +
      groupCount +
      expenseCount +
      settlementCount +
      notificationCount +
      paymentFormulaCount +
      calculationCacheCount;

    console.log(`\nüéØ T·ªïng k·∫øt:`);
    console.log(`   üìà T·ªïng s·ªë records: ${totalRecords}`);

    if (totalRecords > 0) {
      console.log('   ‚úÖ Seed data ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
      console.log('   üöÄ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng ·ª©ng d·ª•ng v·ªõi d·ªØ li·ªáu m·∫´u.');
    } else {
      console.log('   ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t√¨m th·∫•y.');
      console.log('   üí° H√£y ch·∫°y script seed tr∆∞·ªõc: npm run seed');
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra d·ªØ li·ªáu:', error);
    throw error;
  } finally {
    await app.close();
  }
}

// Ch·∫°y script
if (require.main === module) {
  testSeedData()
    .then(() => {
      console.log('‚úÖ Script ki·ªÉm tra ho√†n th√†nh!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script ki·ªÉm tra th·∫•t b·∫°i:', error);
      process.exit(1);
    });
}

export { testSeedData };
